
import java.awt.Graphics;
import java.awt.Image;
import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.ArrayList;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JLabel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Maristela de Paula
 */
public class KombatMainForm extends javax.swing.JFrame implements Runnable {

    /**
     * Creates new form KombatMainForm
     */
    public KombatMainForm() {
        
        this.setContentPane(new JLabel(cenario));
        initComponents();
        this.setLocationRelativeTo(null);
        

        
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jToolBar1 = new javax.swing.JToolBar();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        jToolBar1.setRollover(true);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                formKeyReleased(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tempus Sans ITC", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("p1");

        jLabel2.setFont(new java.awt.Font("Tempus Sans ITC", 1, 36));
        jLabel2.setText("p2");
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(61, 61, 61)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 664, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(108, 108, 108))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1))
                .addContainerGap(592, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        
        connect();
        repaint();
        gameFlowThread = new Thread(this);
        gameFlowThread.start();
        

    }//GEN-LAST:event_formWindowOpened

    public void connect() {
        try {
            s = new Socket("localhost", 8880);
            in = new BufferedReader(new InputStreamReader(s.getInputStream())); //Lê do servidor as posições do jogador
            out = new PrintWriter(s.getOutputStream(), true); //
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void gameFlow() {
        String command;
        try {
            while (true) {

                command = in.readLine();
                String data[] = command.split(" ");
                if (data[0].equals("/player")) {
                    whoami = Integer.parseInt(data[1]);
                    if (players.size() == 0) {
                        Player pnovo = new Player();
                        pnovo.order = whoami;
                        String[] parts = data[2].split(",");
                        pnovo.setCoordinates(Integer.parseInt(parts[0]), Integer.parseInt(parts[1]));
                        pnovo.setup(this);
                        jLabel1.setText(parts[2]);
                        players.add(pnovo);

                    }
                    if (whoami == 2) {
                        Player pnovo = new Player();
                        pnovo.order = whoami;
                        String[] parts = data[2].split(",");
                        pnovo.setCoordinates(Integer.parseInt(parts[0]), Integer.parseInt(parts[1]));
                        pnovo.setup(this);
                        jLabel2.setText(parts[2]);
                        players.add(pnovo);

                    }

                }
                if (data[0].equals("/up")) {
                    boolean found = false;
                    for (Player player1 : players) {
                        if (player1.order == Integer.parseInt(data[1])) {
                            found = true;
                            String[] parts = data[2].split(",");
                            player1.setCoordinates(Integer.parseInt(parts[0]), Integer.parseInt(parts[1]));
                            player1.move();
                        }
                    }

                }
                //executar com outra threadpara ataque?
                if (data[0].equals("/atk")) {
                    String p[] = data[2].split(",");
                    for (Player player1 : players) {
                        if (player1.order == Integer.parseInt(data[1])) {
                            player1.joelhada(this, Integer.parseInt(p[0]), Integer.parseInt(p[1]));

                        }
                    }
                }

                if (data[0].equals("/atkf")) {
                    String p[] = data[2].split(",");
                    String pontos = null;
                    for (Player player1 : players) {
                        if (player1.order == Integer.parseInt(data[1])) {
                            player1.emPosicao(this, Integer.parseInt(p[0]), Integer.parseInt(p[1]));
                            for (int i = 0; i < p.length; i++) {
                                pontos = p[i];
                            }
                        }
                    }
                    if (data[1].equals("1")) {
                        jLabel1.setText(pontos);
                    }else {
                        jLabel2.setText(pontos);
                     }

                }
                if (data[0].equals("/finish")) {
                    String p[] = data[2].split(",");
                    int x = Integer.parseInt(p[0]);
                    for (Player player1 : players) {                        
                        if (player1.order == Integer.parseInt(data[1])&&(p[2].equals("0"))) {
                            player1.Perdedor(this, Integer.parseInt(p[0]), Integer.parseInt(p[1]));
                            
                        }else if(player1.order == Integer.parseInt(data[1])&&(x!=0)){                       
                            player1.Vencedor(this, Integer.parseInt(p[0]), Integer.parseInt(p[1]));

                        }
                    }
                }

            }
        } catch (Exception e) {
            e.printStackTrace();
            System.exit(1);
        }
    }

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_RIGHT) {
            out.println("PR_R");
        }
        if (evt.getKeyCode() == KeyEvent.VK_LEFT) {
            out.println("PR_L");
        }
        if (evt.getKeyCode() == KeyEvent.VK_UP) {
            out.println("PR_U");
        }
        if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
            out.println("PR_D");
        }
        if (evt.getKeyCode() == KeyEvent.VK_SPACE) {
            out.println("PR_BK");
        }


    }//GEN-LAST:event_formKeyPressed

    private void formKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyReleased
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_RIGHT) {
            key_r = false;
            out.println("RE_R");
        }
        if (evt.getKeyCode() == KeyEvent.VK_LEFT) {
            key_r = false;
            out.println("RE_L");
        }
        if (evt.getKeyCode() == KeyEvent.VK_UP) {
            key_r = false;
            out.println("RE_U");
        }
        if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
            key_r = false;
            out.println("RE_D");
        }
        if (evt.getKeyCode() == KeyEvent.VK_SPACE) {
            key_r = false;
            out.println("RE_BK");

        }

    }//GEN-LAST:event_formKeyReleased

    @Override
    public void paint(Graphics g) {
        super.paint(g);
    }

    @Override
    public void run() {

        gameFlow();

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(KombatMainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(KombatMainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(KombatMainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(KombatMainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new KombatMainForm().setVisible(true);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JToolBar jToolBar1;
    // End of variables declaration//GEN-END:variables
    Thread gameFlowThread;
    Player player;
    Socket s;
    BufferedReader in;
    PrintWriter out;
    public int whoami;
    boolean key_r = false;    
    public List<Player> players = new ArrayList<Player>();
    Player atk = new Player();
    ImageIcon cenario = new ImageIcon(new ImageIcon(getClass().getResource("cenario.jpg")).getImage().getScaledInstance(800, 600, Image.SCALE_DEFAULT));
    
}
